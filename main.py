'__author__: b-thebest (Burhanuddin Kamlapurwala)'

from src_data_store.operations.operation_functions import CRD

#optional_path
#NOTE: Empty JSON file should be already created on the custom path

file_path = 'src_data_store/data/'

data = {"demo": {"name": "John", "city": "Seattle"}}

#create operation
print(CRD().create(data))
print(CRD().create({"demo2": {"name": "Bob", "city": "Agra", "Time-To-Live": 120}}))
print(CRD().create({"demo3": {"name": "Alan", "city": "Indore", "Time-To-Live": 60}}))

#read operation
print(CRD().read("demo"))
print(CRD().read("demo2"))
print(CRD().read("demo3"))

#delete operation
print(CRD().delete("demo2"))

#Checking if it takes duplicate keys or not
print(CRD().create(data))

#Checking if it takes key more than 32 characters
print(CRD().create({"onetwothreefourfivesixseveneightnineten": {"name": "My Name"}}))

#Checking if it takes key with special characters or spaces
print(CRD().create({"new key": {"name": "My Name"}}))
print(CRD().create({"keyWithSpecial@character": {"name": "My Name"}}))

#Checking if it takes values other than JSON format for a key
print(CRD().create({"newKey": "New Name"}))

#Checking if JSON of more than 16KB is allowed or not with random string of greater than 16KB
print(CRD().create({"demo4": {"randomString": ""}}))

'''NOTE:: Key constraints are applied on every CRD operations as shown for create'''

#Check if it can read expired data or not
print(CRD().read("demo3"))

#Check if it can deny request for key which does not exist
print(CRD().read("notExistingKey"))

#Check if it can delete expired data
print(CRD().delete("demo3"))

#Check if it can deny delete request for key which does not exist
print(CRD().delete("notExistingKey"))

##With threading
import threading

threads = []
lock = threading.Lock()
threads.append(threading.Thread(target=CRD().create, args=({"sample1": {"name": "Alan"}},), name="thread1"))
threads.append(threading.Thread(target=CRD().create, args=({"sample2": {"name": "John", "Time-To-Live": 120}},), name="thread2"))
threads.append(threading.Thread(target=CRD().create, args=({"sample3": {"name": "Eric", "Time-To-Live": 60}},), name="thread3"))

threads.append(threading.Thread(target=CRD().read, args=("sample1",), name="thread4"))
threads.append(threading.Thread(target=CRD().delete, args=("sample2",), name="thread5"))

for thread in threads:
    thread.start()

for thread in threads:
    thread.join()

